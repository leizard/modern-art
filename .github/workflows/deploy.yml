name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.17.0'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run tests
      run: npm test --if-present
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=main-
          type=raw,value=latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 46.250.239.106 >> ~/.ssh/known_hosts
    
    - name: Deploy to Production VM
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@46.250.239.106 << 'EOF'
        set -e
        
        # Navigate to deployment directory
        cd /opt/modern-art
        
        # Clone or update repository
        if [ ! -d ".git" ]; then
          echo "Cloning repository for the first time..."
          git clone https://github.com/leizard/modern-art.git .
        else
          echo "Updating existing repository..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
        fi
        
        # Verify files exist
        ls -la docker-compose*.yml
        
        # Set environment variable for compose
        export GITHUB_REPOSITORY="leizard/modern-art"
        
        # Login to GitHub Container Registry
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        
        # Pull latest image
        docker compose -f docker-compose.yml -f docker-compose.prod.yml pull web
        
        # Stop current containers gracefully
        docker compose -f docker-compose.yml -f docker-compose.prod.yml down --timeout 30 || true
        
        # Remove any orphaned containers
        docker compose -f docker-compose.yml -f docker-compose.prod.yml rm -f || true
        
        # Start new deployment
        docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
        
        # Wait for application to be ready
        echo "Waiting for application to be ready..."
        for i in {1..24}; do
          # Check if container is running
          if docker ps --filter "name=modern-art-website" --filter "status=running" | grep -q "modern-art-website"; then
            # Check if application responds
            if curl -f -s http://localhost:3000 >/dev/null 2>&1; then
              echo "✅ Container is running and application is responding!"
              break
            fi
          fi
          
          if [ $i -eq 24 ]; then
            echo "❌ Application failed to start after 2 minutes"
            docker compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=50
            exit 1
          fi
          echo "Attempt $i/24: Waiting for application to be ready..."
          sleep 5
        done
        
        # Final verification
        sleep 5
        if curl -f http://localhost:3000 >/dev/null 2>&1; then
          echo "✅ Application is responding correctly"
          
          # Log successful deployment
          echo "$(date): Deployment successful - Commit: ${{ github.sha }}" >> /opt/modern-art/deployment.log
          echo "GitHub Action Run: ${{ github.run_id }}" >> /opt/modern-art/deployment.log
        else
          echo "❌ Application health check failed"
          exit 1
        fi
        
        # Cleanup old images (keep last 3)
        docker image prune -f --filter "until=72h"
        EOF

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Verify HTTP Access
      run: |
        # Wait for service to be fully ready
        sleep 10
        
        # Test HTTP access
        for i in {1..5}; do
          if curl -f -m 10 http://46.250.239.106:3000; then
            echo "✅ Website is accessible at http://46.250.239.106:3000"
            exit 0
          fi
          echo "Attempt $i/5: Waiting for access..."
          sleep 10
        done
        
        echo "❌ Website verification failed"
        exit 1