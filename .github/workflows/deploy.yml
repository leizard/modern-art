name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.17.0'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=main-
          type=raw,value=latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Production VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: "34.59.2.8"
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.VM_SSH_KEY }}
        timeout: 300s
        script: |
          set -e
          
          # Navigate to deployment directory
          cd /opt/modern-art
          
          # Update deployment files
          git pull origin main 2>/dev/null || echo "No git repo, using uploaded files"
          
          # Set environment variable for compose
          export GITHUB_REPOSITORY="${{ github.repository }}"
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          
          # Pull latest image
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
          
          # Stop current containers gracefully
          docker compose -f docker-compose.yml -f docker-compose.prod.yml down --timeout 30 || true
          
          # Remove any orphaned containers
          docker compose -f docker-compose.yml -f docker-compose.prod.yml rm -f || true
          
          # Start new deployment
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          # Wait for health checks to pass
          echo "Waiting for health checks to pass..."
          for i in {1..24}; do
            if docker compose -f docker-compose.yml -f docker-compose.prod.yml ps --format json | jq -r '.[].Health' | grep -q "healthy"; then
              echo "✅ Health checks passed!"
              break
            fi
            if [ $i -eq 24 ]; then
              echo "❌ Health checks failed after 2 minutes"
              docker compose -f docker-compose.yml -f docker-compose.prod.yml logs
              exit 1
            fi
            echo "Attempt $i/24: Waiting for containers to be healthy..."
            sleep 5
          done
          
          # Final verification
          sleep 5
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "✅ Application is responding correctly"
            
            # Log successful deployment
            echo "$(date): Deployment successful - Commit: ${{ github.sha }}" >> /opt/modern-art/deployment.log
            echo "GitHub Action Run: ${{ github.run_id }}" >> /opt/modern-art/deployment.log
          else
            echo "❌ Application health check failed"
            exit 1
          fi
          
          # Cleanup old images (keep last 3)
          docker image prune -f --filter "until=72h"

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Verify External Access
      run: |
        # Wait for service to be fully ready
        sleep 10
        
        # Test external access
        for i in {1..5}; do
          if curl -f -m 10 http://34.59.2.8:3000; then
            echo "✅ Website is publicly accessible"
            exit 0
          fi
          echo "Attempt $i/5: Waiting for external access..."
          sleep 10
        done
        
        echo "❌ External access verification failed"
        exit 1